git 使用方法

1 注册github账号

2 下载git客户端 gitbash

3 mkdir /d/opt/repository创建本地仓库   git init创建git配置文件

4 git与github之间的传输是通过SSH加密的，所以第一步先在本地生成一.ssh   cd ~/.ssh  先查看本地是否有.ssh文件，有的话删掉

5 输入命令，生成.ssh，写你自己的邮箱   ssh-keygen -t rsa -C "your email@.com"

6 为了避免与github创建连接时出错，可以新建一个config文件，将以下代码复制进去   Host github.com
    User git
    Hostname ssh.github.com
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/id_rsa
    Port 443


7 将id_rsa.pug的内容复制到指定位置  头像  setting  ssh and gpg keys 

8 测试连接是否成功，下图表示访问成功	ssh -t git@github.com

9 上传项目 git add <文件名>   git commit -m "first commit" 

   git remote add origin git@github.com:zhengyp/Myproject.git

   如果出错  git remote rm origin 后继续上一步

10 git push -u origin master

11 更新文件 git add readme.txt  git commit -m "优化二进宫"   git push -u origin master 

12 开始学习分支相关部分

13 克隆代码库到本地  拷贝链接  打开gitbash  cd /d/opt1    git clone git@github.com:zhengyp/Myproject.git

14 更新本地仓库 cd /d/opt1  git add .  git commit -m "编辑"  

15 更新远程仓库 git push 

16 创建分支 git branch dev  查看分支：git branch 

17 切换分支：git checkout dev   切回主分支

18 分支修改 git add . 必须跟新本地仓库才能切回主分支  git commit -m "dev修改"



165  git branch dev
  166  git checkout dev
  167  git branch
  168  git checkout master
  169  git add branch.txt
  170  git commit -m "分支测试"
  171  git checkout dev
  172  git checkout master
  173  git checkout dev
  174  git add branch.txt
  175  git commit -m "第一次修改分支"
  176  git checkout master
  177  git push -u origin master
  178  git merge dev
  179  git status
  180  git commit -a
  181  git merge dev
  182  git push
  183  history

git支持很多种工作流程，我们采用的一般是这样，远程创建一个主分支，本地每人创建功能分支，日常工作流程如下：

去自己的工作分支
去自己的工作分支
$ git checkout work

工作
....

提交工作分支的修改
$ git commit -a

回到主分支
$ git checkout master

获取远程最新的修改，此时不会产生冲突
$ git pull

回到工作分支
$ git checkout work

用rebase合并主干的修改，如果有冲突在此时解决
$ git rebase master

回到主分支
$ git checkout master

合并工作分支的修改，此时不会产生冲突。
$ git merge work

提交到远程主干
$ git push



 git clone https://github.com/zhengyp/Myproject
   39  cd f:
   40  cd opt1
   41  cd only
   42  git init
   43  cd ../
   44  cd Myproject/
   45  cd ../only/
   46  ls
   47  git add.
   48  git add .
   49  git commit -m 'first commit'
   50  git remote add origin git@github.com:zhengyp/only.git
   51  git push -u origin master
   52  git pull
   53  git push -u origin master
   54  ls
   55  git pull
   56  git clone git@github.com:zhengyp/only.git
   57  ls
   58  ls
   59  cd ..
   60  ls
   61  git clone @kevin-PC MINGW64 /f/opt1
   62  $ git clone
   63  $ git clone @kevin-PC MINGW64 /f/opt1
   64  $ git clone
   65  cd only
   66  git init
   67  git pull @kevin-PC MINGW64 /f/opt1
   68  $ git clone
   69  $ git clone git@github.com:zhengyp/only.git
   70  $ git clone git@github.com:zhengyp/only.git
   71  git pull git@github.com:zhengyp/only.git
   72  ls
   73  ls
   74  git add .
   75  git commit -m "第一次提交"
   76  git push
   77  git remote add git@github.com:zhengyp/only.git
   78  git remote add origin git@github.com:zhengyp/only.git
   79  git push -u origin master
   80  git add reg.json
   81  git commit -m "第二次提交"
   82  git push
   83  git add reg.json

